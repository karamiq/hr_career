// tool/generate_assets.dart
import 'dart:io';
import 'package:path/path.dart' as p;

final assetsDir = Directory('assets');
final outFile = File('lib/utils/constants/assets.dart');

String sanitizeIdentifier(String s) {
  // remove extension and replace non-alphanum with underscore
  final name = p.withoutExtension(s).replaceAll(RegExp(r'[^A-Za-z0-9_]'), '_');

  // collapse multiple underscores
  var id = name.replaceAll(RegExp(r'_+'), '_');

  // make sure it doesn't start with a digit
  if (RegExp(r'^[0-9]').hasMatch(id)) id = '_$id';

  // camelCase: split by '_' and join
  final parts = id.split('_').where((p) => p.isNotEmpty).toList();
  if (parts.isEmpty) return 'asset';
  final first = parts.first.toLowerCase();
  final rest = parts.skip(1).map((s) => s.isNotEmpty ? s[0].toUpperCase() + s.substring(1) : '').join();
  return '$first$rest';
}

void main() {
  if (!assetsDir.existsSync()) {
    stderr.writeln('No assets directory found at ./assets');
    exit(1);
  }

  final entries = <Map<String, String>>[];

  void walk(Directory dir, [String prefix = '']) {
    for (var entity in dir.listSync()) {
      if (entity is File) {
        final relative = p.relative(entity.path, from: '.').replaceAll(r'\', '/');
        final filename = p.basename(entity.path);
        final idBase = sanitizeIdentifier((prefix.isEmpty ? '' : '${prefix}_') + filename);
        var id = idBase;
        var i = 1;
        // ensure uniqueness
        while (entries.any((e) => e['id'] == id)) {
          id = '${idBase}_$i';
          i++;
        }
        entries.add({'id': id, 'path': relative});
      } else if (entity is Directory) {
        final nextPrefix = prefix.isEmpty ? p.basename(entity.path) : p.basename(entity.path);
        walk(entity, nextPrefix);
      }
    }
  }

  walk(assetsDir);

  final buffer = StringBuffer();
  buffer.writeln('// GENERATED CODE - DO NOT EDIT');
  buffer.writeln('// Generated by tool/generate_assets.dart');
  buffer.writeln('');
  buffer.writeln('class Assets {');
  for (var e in entries) {
    buffer.writeln("  /// ${e['path']}");
    buffer.writeln("  static const String ${e['id']} = '${e['path']}';");
    buffer.writeln('');
  }
  buffer.writeln('}');

  outFile.createSync(recursive: true);
  outFile.writeAsStringSync(buffer.toString());
  print('Generated ${outFile.path} with ${entries.length} assets.');
}
